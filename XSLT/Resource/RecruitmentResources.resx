<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BrowserOnServerLink" xml:space="preserve">
    <value>Browser on server</value>
  </data>
  <data name="ButtonDisabledPleaseWait" xml:space="preserve">
    <value>Please wait</value>
  </data>
  <data name="ChooseDistrict" xml:space="preserve">
    <value>Choose district</value>
  </data>
  <data name="ChooseProvinces" xml:space="preserve">
    <value>Choose province</value>
  </data>
  <data name="ContentTab" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="DepartmentDescriptionLabel" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DepartmentDisplayOrderLabel" xml:space="preserve">
    <value>Display order</value>
  </data>
  <data name="DepartmentNameLabel" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="DescriptionLabel" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DisplayOrderLabel" xml:space="preserve">
    <value>Display order</value>
  </data>
  <data name="DisrtictLabel" xml:space="preserve">
    <value>Disrtict</value>
  </data>
  <data name="EditLink" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EnableKeywordFiltering" xml:space="preserve">
    <value>Enable keyword filtering</value>
  </data>
  <data name="FileAttachmentLabel" xml:space="preserve">
    <value>File attachment</value>
  </data>
  <data name="FriendlyUrlRegexWarning" xml:space="preserve">
    <value>Url must start with ~/ or http:// or https:// and it should have no white spaces in it.</value>
  </data>
  <data name="HideOtherContentsOnDetailPage" xml:space="preserve">
    <value>Hide other contents on detail page</value>
  </data>
  <data name="HidePaginationOnDetailPage" xml:space="preserve">
    <value>Hide Pagination On Detail Page</value>
  </data>
  <data name="ImageDeleteConfirmMessage" xml:space="preserve">
    <value>Are you sure you want to delete this image ?</value>
  </data>
  <data name="ImageFile" xml:space="preserve">
    <value>Image file</value>
  </data>
  <data name="IsPublishedLabel" xml:space="preserve">
    <value>Is Published</value>
  </data>
  <data name="JobAddressLabel" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="JobAddressRequiredLabel" xml:space="preserve">
    <value>Address is required</value>
  </data>
  <data name="JobApplyLable" xml:space="preserve">
    <value>Apply for job</value>
  </data>
  <data name="JobApplyRefreshLink" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="JobApplyThankYouLabel" xml:space="preserve">
    <value>Thank You! Your message has been received.</value>
  </data>
  <data name="JobApplyViewAllCVLabel" xml:space="preserve">
    <value>View all</value>
  </data>
  <data name="JobAttachFile1Label" xml:space="preserve">
    <value>Attach file 1</value>
  </data>
  <data name="JobAttachFile2Label" xml:space="preserve">
    <value>Attach file 2</value>
  </data>
  <data name="JobAttachFileLabel" xml:space="preserve">
    <value>Attach File</value>
  </data>
  <data name="JobCandidateInfoLabel" xml:space="preserve">
    <value>Candidate Info</value>
  </data>
  <data name="JobEmailLabel" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="JobEmailRequiredLabel" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="JobEmptyMessageWarning" xml:space="preserve">
    <value>Message is required</value>
  </data>
  <data name="JobFullNameLabel" xml:space="preserve">
    <value>Full name</value>
  </data>
  <data name="JobFullNameRequiredLabel" xml:space="preserve">
    <value>Full name is required</value>
  </data>
  <data name="JobMessageLabel" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="JobNoteLabel" xml:space="preserve">
    <value>Please complete the information below</value>
  </data>
  <data name="JobPhoneLabel" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="JobPhoneRequiredLabel" xml:space="preserve">
    <value>Phone is required</value>
  </data>
  <data name="JobPositionLabel" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="JobPositionRequiredLabel" xml:space="preserve">
    <value>Position is required</value>
  </data>
  <data name="JobRequiredLabel" xml:space="preserve">
    <value>required</value>
  </data>
  <data name="JobRequiredStarLabel" xml:space="preserve">
    <value>*</value>
  </data>
  <data name="JobValidEmailLabel" xml:space="preserve">
    <value>Email is invalid</value>
  </data>
  <data name="JobViewCVFormat" xml:space="preserve">
    <value>List CV ({0})</value>
  </data>
  <data name="JobViewCVTitle" xml:space="preserve">
    <value>List CV</value>
  </data>
  <data name="LoadDepartmentList" xml:space="preserve">
    <value>Load Departments</value>
  </data>
  <data name="LoadProvinceList" xml:space="preserve">
    <value>Load Provinces</value>
  </data>
  <data name="LoadZoneList" xml:space="preserve">
    <value>Load Zone</value>
  </data>
  <data name="MetaDescriptionLabel" xml:space="preserve">
    <value>Meta description</value>
  </data>
  <data name="MetaKeywordsLabel" xml:space="preserve">
    <value>Meta keywords</value>
  </data>
  <data name="MetaTab" xml:space="preserve">
    <value>Meta</value>
  </data>
  <data name="OtherRecruitmentsPerPageSetting" xml:space="preserve">
    <value>Other Recruitments Per Page</value>
  </data>
  <data name="PageUrlInUseErrorMessage" xml:space="preserve">
    <value>The Url is already in use. You cannot use the same Url for different pages.</value>
  </data>
  <data name="ParentZonesSetting" xml:space="preserve">
    <value>Parent categories</value>
  </data>
  <data name="PreviewLabel" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="ProvinceLabel" xml:space="preserve">
    <value>Province</value>
  </data>
  <data name="RecruitmentAddNewTitle" xml:space="preserve">
    <value>Add new recruitment</value>
  </data>
  <data name="RecruitmentAppliedCountLabel" xml:space="preserve">
    <value>Applied count</value>
  </data>
  <data name="RecruitmentBeginDateRequired" xml:space="preserve">
    <value>Begin date is required</value>
  </data>
  <data name="RecruitmentCodeLabel" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="RecruitmentCommentPostCommentButton" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="RecruitmentCommentPostCommentButtonAccessKey" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="RecruitmentDateFormat" xml:space="preserve">
    <value>dd/MM/yyyy</value>
  </data>
  <data name="RecruitmentDeleteMultiWarning" xml:space="preserve">
    <value>Are you sure you want to delete this recruitment ?</value>
  </data>
  <data name="RecruitmentDeleteSelectedButton" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="RecruitmentDeleteWarning" xml:space="preserve">
    <value>Are you sure you want to delete this recruitment ?</value>
  </data>
  <data name="RecruitmentDepartmentDeleteWarning" xml:space="preserve">
    <value>Are you sure you want to delete this department ?</value>
  </data>
  <data name="RecruitmentDepartmentEdit" xml:space="preserve">
    <value>Edit department</value>
  </data>
  <data name="RecruitmentDepartmentEditPage" xml:space="preserve">
    <value>Add / Edit Department</value>
  </data>
  <data name="RecruitmentDepartmentLabel" xml:space="preserve">
    <value>Department</value>
  </data>
  <data name="RecruitmentDepartmentListPage" xml:space="preserve">
    <value>Departments</value>
  </data>
  <data name="RecruitmentDepartmentTitle" xml:space="preserve">
    <value>Departments</value>
  </data>
  <data name="RecruitmentDisplayOrderLabel" xml:space="preserve">
    <value>Display order</value>
  </data>
  <data name="RecruitmentEditBriefContentLabel" xml:space="preserve">
    <value>Brief content</value>
  </data>
  <data name="RecruitmentEditContentLabel" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="RecruitmentEditDeleteButton" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="RecruitmentEditDisplayOrderLabel" xml:space="preserve">
    <value>Display order</value>
  </data>
  <data name="RecruitmentEditEndDateLabel" xml:space="preserve">
    <value>End date</value>
  </data>
  <data name="RecruitmentEditItemUrlLabel" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="RecruitmentEditLanguageLabel" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="RecruitmentEditLanguageNotCareLabel" xml:space="preserve">
    <value>Not care</value>
  </data>
  <data name="RecruitmentEditLink" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="RecruitmentEditPreviewLabel" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="RecruitmentEditStartDateLabel" xml:space="preserve">
    <value>Start date</value>
  </data>
  <data name="RecruitmentEditTitle" xml:space="preserve">
    <value>Edit recruitment</value>
  </data>
  <data name="RecruitmentImagesLabel" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="RecruitmentImagesTab" xml:space="preserve">
    <value>Images</value>
  </data>
  <data name="RecruitmentImageTitleLabel" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="RecruitmentInsertLabel" xml:space="preserve">
    <value>Insert</value>
  </data>
  <data name="RecruitmentLabel" xml:space="preserve">
    <value>Recruitment</value>
  </data>
  <data name="RecruitmentList" xml:space="preserve">
    <value>Recruitments</value>
  </data>
  <data name="RecruitmentListPage" xml:space="preserve">
    <value>Recruitments</value>
  </data>
  <data name="RecruitmentListTitle" xml:space="preserve">
    <value>Recruitments</value>
  </data>
  <data name="RecruitmentMediaTab" xml:space="preserve">
    <value>Media</value>
  </data>
  <data name="RecruitmentNameLabel" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="RecruitmentPositionLabel" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="RecruitmentQuantityLabel" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="RecruitmentSearchButton" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="RecruitmentsPerPageSetting" xml:space="preserve">
    <value>Items per page</value>
  </data>
  <data name="RecruitmentThumbnailLabel" xml:space="preserve">
    <value>Thumbnail</value>
  </data>
  <data name="RecruitmentTimeFormat" xml:space="preserve">
    <value>hh:mm</value>
  </data>
  <data name="RecruitmentUpdateButton" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="RecruitmentUrlConflictWithPhysicalPageError" xml:space="preserve">
    <value>Please enter a different Url. The entered Url conflicts with an existing page.</value>
  </data>
  <data name="RelatedRecruitmentsToShow" xml:space="preserve">
    <value>Related Recruitment To Show</value>
  </data>
  <data name="SelectFromComputerLabel" xml:space="preserve">
    <value>Select from computer</value>
  </data>
  <data name="SelectZoneMessage" xml:space="preserve">
    <value>Catalog</value>
  </data>
  <data name="ShowAllImagesInRecruitmentList" xml:space="preserve">
    <value>Show All Images In List</value>
  </data>
  <data name="ShowAllRecruitmentsFromChildZoneSetting" xml:space="preserve">
    <value>Show All Items From Child Categories</value>
  </data>
  <data name="ShowHiddenContentsOnDetailPage" xml:space="preserve">
    <value>Show hidden contents on detail page</value>
  </data>
  <data name="ShowOptionLabel" xml:space="preserve">
    <value>Show options</value>
  </data>
  <data name="ShowPageLeftContentSetting" xml:space="preserve">
    <value>Show Page Left Content in detail?</value>
  </data>
  <data name="ShowPageRightContentSetting" xml:space="preserve">
    <value>Show Page Right Content in  detail?</value>
  </data>
  <data name="SubTitle" xml:space="preserve">
    <value>Sub title</value>
  </data>
  <data name="TitleRequiredWarning" xml:space="preserve">
    <value>Title is required</value>
  </data>
  <data name="ViewMoreLabel" xml:space="preserve">
    <value>View more</value>
  </data>
  <data name="XsltFileName" xml:space="preserve">
    <value>List Page template</value>
  </data>
  <data name="XsltFileNameDetailPage" xml:space="preserve">
    <value>Detail page template</value>
  </data>
</root>